generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User models

model Role {
  id        Int       @id @default(autoincrement())
  role      UserRoles @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User[]

  @@map("roles")
}

model User {
  id             Int           @id @default(autoincrement())
  name           String
  email          String        @unique
  password       String
  avatar         String?
  is_google_auth Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  role_id        Int
  role           Role          @relation(fields: [role_id], references: [id], onDelete: Cascade)
  refreshToken   RefreshToken?
  order          Order[]

  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user_id   Int      @unique
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// Order models

model OrderStatus {
  id        Int           @id @default(autoincrement())
  name      OrderStatuses @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  Order     Order[]

  @@map("order_statuses")
}

model Order {
  id           Int            @id @default(autoincrement())
  user_name    String
  phone        String
  city         String
  message      String?
  total_price  Float
  order_status Int
  orderStatus  OrderStatus    @relation(fields: [order_status], references: [id], onDelete: Restrict)
  user_id      Int?
  user         User?          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  orderProduct OrderProduct[]

  @@map("orders")
}

model OrderProduct {
  id         Int     @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int
  order      Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("order_products")
}

// Product models

model ProductCategory {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("product_categories")
}

model Product {
  id             Int             @id @default(autoincrement())
  name           String
  description    String
  characters     String?
  new_price      Float
  old_price      Float?
  featured_image String?
  images         String?
  is_new         Boolean         @default(false)
  is_available   Boolean         @default(true)
  category_id    Int
  category       ProductCategory @relation(fields: [category_id], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  orderProduct   OrderProduct[]
  reviews        Review[]
  productSize    ProductSize[]
  productColor   ProductColor[]

  @@map("products")
}

model Review {
  id         Int      @id @default(autoincrement())
  user_name  String
  content    String
  rating     Float
  product_id Int
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("reviews")
}

// Size & Color models

model Size {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  productSize ProductSize[]

  @@map("sizes")
}

model ProductSize {
  id         Int     @id @default(autoincrement())
  product_id Int
  size_id    Int
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  size       Size    @relation(fields: [size_id], references: [id], onDelete: Restrict)
}

model Color {
  id           Int            @id @default(autoincrement())
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ProductColor ProductColor[]
}

model ProductColor {
  id         Int     @id @default(autoincrement())
  product_id Int
  color_id   Int
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  color      Color   @relation(fields: [color_id], references: [id], onDelete: Restrict)
}

// Enums

enum UserRoles {
  USER
  ADMIN
  MODERATOR
}

enum OrderStatuses {
  PENDING
  CONFIRMED
  SENT
  DELIVERED
  COMPLETED
  CANCELLED
}
